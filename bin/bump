#!/usr/bin/env bash
# Increase version in code
#  -> use use before bin/tag
# Based on https://googlefonts.github.io/gf-guide/requirements.html#font-versioning
# usage: bin/tag [patch | minor | significant | major]
set -e -o pipefail

function get_latest_tag() {
  local -r version=$( \
    git describe --abbrev=0 --tags \
      | sed 's/v//' \
  )
  echo "${version:-'0.000'}"
}

function get_current_version() {
  local -r current_version=$( \
    cat "bin/docker/forge.pe" \
      | grep "FONT_VERSION=" \
      | sed 's/FONT_VERSION=//' \
      | sed 's/"//g' \
      | sed 's/;//' \
  )
  echo "${current_version:-'0.000'}"
}

function main() {
  local tag_version=$(get_latest_tag)
  local version=$(get_current_version)
  local old_version="${version}"
  if [ "${tag_version}" != ${version} ]; then
    bin/print end-first "ERROR: tag_version:${tag_version} != current_version:${version}"
    exit 1
  fi
  local major="${version%%.*}"; version="${version#*.}"
  local rest="${version%%.*}"; version="${version#*.}"

  # Increment
  if [ "${1}" == 'major' ]; then
    major=$((major+1))
  elif [ "${1}" == 'significant' ]; then
    rest=$((rest+100))
  elif [ "${1}" == 'minor' ]; then
    rest=$((rest+10))
  elif [ "${1}" == 'patch' ]; then
    rest=$((rest+1))
  else
    bin/print end-first "ERROR: unknown increment: ${1}"
    exit 1
  fi

  if [ $rest -gt 999 ]; then
    bin/print end-first "ERROR: can't use v${version}"
    exit 1
  fi

  local -r new_version=$(printf "%s.%03d" $major $rest)

  sed -i "" "s/FONT_VERSION=\"${old_version}\"/FONT_VERSION=\"${new_version}\"/g" bin/docker/forge*.pe

  bin/print end-first "Bumped ${old_version} -> ${new_version}"
}

main $@
